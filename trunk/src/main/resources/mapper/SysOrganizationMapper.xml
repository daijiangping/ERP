<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoplus.system.dao.SysOrganizationMapper">
  <resultMap id="BaseResultMap" type="com.nuoplus.system.model.SysOrganization">

    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="parent_ids" jdbcType="VARCHAR" property="parentIds" />
    <result column="available" jdbcType="BIT" property="available" />
  </resultMap>
  <sql id="Base_Column_List">

    id, name, parent_id, parent_ids, available
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">

    select 
    <include refid="Base_Column_List" />
    from sys_organization
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="findAll"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_organization
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">

    delete from sys_organization
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.nuoplus.system.model.SysOrganization">

    insert into sys_organization (id, name, parent_id, 
      parent_ids, available)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT}, 
      #{parentIds,jdbcType=VARCHAR}, #{available,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.nuoplus.system.model.SysOrganization">

    insert into sys_organization
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="parentIds != null">
        parent_ids,
      </if>
      <if test="available != null">
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="parentIds != null">
        #{parentIds,jdbcType=VARCHAR},
      </if>
      <if test="available != null">
        #{available,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nuoplus.system.model.SysOrganization">

    update sys_organization
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="parentIds != null">
        parent_ids = #{parentIds,jdbcType=VARCHAR},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nuoplus.system.model.SysOrganization">

    update sys_organization
    set name = #{name,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      parent_ids = #{parentIds,jdbcType=VARCHAR},
      available = #{available,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="findAllWithExclude"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_organization
    where id! = #{orgId} and parent_ids not like #{orgIds}
  </select>
  <select id="findOrganizationByUser" parameterType="java.lang.Long"  resultMap="BaseResultMap">
    select so.* from sys_organization so,sys_user_organization suo WHERE
    suo.org_id=so.id AND suo.user_id= #{id}
  </select>
  <select id="countSubOrgByOrgId"  resultType="java.lang.Integer">
    select count(so.id) from sys_organization so,sys_organization ss where so.parent_id =ss.id and ss.id= #{id,jdbcType=BIGINT}
    <if test="keyword != null and keyword!=''">
      AND so.name like  CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
    </if>
  </select>
  <select id="findSubOrgByOrgId"  resultMap="BaseResultMap">
    select so.* from sys_organization so,sys_organization ss where so.parent_id =ss.id and ss.id= #{id,jdbcType=BIGINT}
    <if test="keyword != null and keyword!=''">
      AND so.name like  CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
    </if>
    limit #{startRecords},#{pageSize}
  </select>
  <delete id="batchDel" parameterType="String">

    delete from sys_organization
    where id in (${_parameter})
  </delete>
  <select id="findByparent" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_organization
    where parent_id = #{id,jdbcType=BIGINT}
  </select>
  <select id="findByparents" parameterType="String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_organization
    where parent_id in (${_parameter})
  </select>
<!--  根据组织机构树父节点获取组织机构数子节点-->
    <select id="getOrgZtreeSubNodes" resultType="java.util.Map">
      select id,parent_id as pId,name
      from sys_organization
      where 1=1
      /*id为0时为根节点*/
      <if test="_parameter!=0">
        and parent_ids LIKE  CONCAT('%/', #{id}, '/%')
      </if>
    </select>

</mapper>